import os
import sys
from kivy.uix.screenmanager import Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.core.window import Window
from kivy.metrics import dp
from kivy.graphics import Color, RoundedRectangle, Line

# Asegura acceso al directorio ra√≠z
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

class PantallaAvisoLegal(Screen):
    def __init__(self, continuar_callback=None, **kwargs):
        super().__init__(**kwargs)
        self.name = 'aviso_legal'
        self.continuar_callback = continuar_callback or self._callback_por_defecto
        self.crear_interfaz()
    
    def crear_interfaz(self):
        # Layout principal
        main_layout = BoxLayout(
            orientation='vertical',
            spacing=dp(10),
            padding=[dp(15), dp(25), dp(15), dp(15)]
        )
        
        # Fondo blanco
        with main_layout.canvas.before:
            Color(1, 1, 1, 1)
            self.bg_rect = RoundedRectangle(
                pos=main_layout.pos, 
                size=main_layout.size
            )
            main_layout.bind(size=self._update_bg, pos=self._update_bg)
        
        # Header compacto
        header = BoxLayout(
            orientation='vertical',
            size_hint_y=None,
            height=dp(70),
            spacing=dp(5)
        )
        
        # Icono
        icono = Label(
            text='‚öñÔ∏è',
            font_size=dp(25),
            size_hint_y=None,
            height=dp(30),
            color=(0.2, 0.4, 0.7, 1)
        )
        header.add_widget(icono)
        
        # T√≠tulo
        titulo = Label(
            text='Aviso Legal / Legal Notice',
            font_size=dp(16),
            bold=True,
            size_hint_y=None,
            height=dp(30),
            color=(0.2, 0.2, 0.2, 1)
        )
        header.add_widget(titulo)
        
        main_layout.add_widget(header)
        
        # ScrollView con contenido completo
        scroll = ScrollView(
            do_scroll_x=False,
            do_scroll_y=True,
            bar_width=dp(4),
            scroll_type=['content']
        )
        
        # Contenedor scrolleable
        content_layout = BoxLayout(
            orientation='vertical',
            size_hint_y=None,
            padding=dp(10),
            spacing=dp(8)
        )
        content_layout.bind(minimum_height=content_layout.setter('height'))
        
        # Fondo del contenido
        with content_layout.canvas.before:
            Color(0.96, 0.96, 0.96, 1)
            self.content_bg = RoundedRectangle(
                pos=content_layout.pos,
                size=content_layout.size,
                radius=[dp(10)]
            )
            content_layout.bind(size=self._update_content_bg, pos=self._update_content_bg)
        
        # Texto completo dividido en secciones m√°s manejables
        secciones = [
            ("üìã T√âRMINOS DE USO", 
             "Este asistente es una herramienta personal para el estudio b√≠blico y la predicaci√≥n. "
             "No representa ninguna organizaci√≥n religiosa oficial. El contenido es √∫nicamente "
             "para fines educativos y de estudio personal."),
            
            ("PRIVACIDAD Y SEGURIDAD:", 
             "‚Ä¢ La aplicaci√≥n respeta tu privacidad\n"
             "‚Ä¢ Los datos se almacenan localmente\n"
             "‚Ä¢ No se comparte informaci√≥n personal\n"
             "‚Ä¢ No requiere conexi√≥n a internet\n"
             "‚Ä¢ Uso responsable bajo tu criterio"),
            
            ("RESPONSABILIDADES:", 
             "‚Ä¢ Usar la aplicaci√≥n responsablemente\n"
             "‚Ä¢ Verificar informaci√≥n con fuentes oficiales\n"
             "‚Ä¢ Respetar derechos de autor\n"
             "‚Ä¢ Solo para uso personal"),
            
            ("üìã TERMS OF USE", 
             "This assistant is a personal tool for Bible study and preaching. "
             "It does not represent any official religious organization. The content "
             "is solely for educational and personal study."),
            
            ("PRIVACY & SECURITY:", 
             "‚Ä¢ App respects your privacy\n"
             "‚Ä¢ Data stored locally\n"
             "‚Ä¢ No personal info shared\n"
             "‚Ä¢ No internet required\n"
             "‚Ä¢ Responsible use at discretion"),
            
            ("RESPONSIBILITIES:", 
             "‚Ä¢ Use application responsibly\n"
             "‚Ä¢ Verify info with official sources\n"
             "‚Ä¢ Respect copyright\n"
             "‚Ä¢ Personal use only"),
            
            ("ü§ù ACEPTACI√ìN / ACCEPTANCE", 
             "Al continuar, aceptas estos t√©rminos.\n"
             "By continuing, you accept these terms.\n\n"
             "üìÖ Versi√≥n 1.0 | Junio 2025")
        ]
        
        # Agregar cada secci√≥n como un label separado
        for titulo_seccion, contenido_seccion in secciones:
            # T√≠tulo de secci√≥n
            if titulo_seccion.startswith(("üìã", "ü§ù")):
                titulo_label = Label(
                    text=titulo_seccion,
                    font_size=dp(13),
                    bold=True,
                    size_hint_y=None,
                    color=(0.1, 0.1, 0.1, 1),
                    halign='left',
                    text_size=(None, None)
                )
                titulo_label.bind(texture_size=titulo_label.setter('size'))
                content_layout.add_widget(titulo_label)
            
            # Contenido de secci√≥n
            contenido_label = Label(
                text=contenido_seccion if not titulo_seccion.startswith(("üìã", "ü§ù")) else f"{titulo_seccion}\n\n{contenido_seccion}",
                font_size=dp(11),
                size_hint_y=None,
                color=(0.2, 0.2, 0.2, 1),
                halign='left',
                valign='top',
                text_size=(None, None),
                line_height=1.1
            )
            
            # Configurar text_size din√°micamente
            def update_text_width(label, *args):
                label.text_size = (Window.width - dp(80), None)
                label.texture_update()
            
            contenido_label.bind(size=update_text_width)
            Window.bind(size=lambda *args: update_text_width(contenido_label))
            
            # Forzar actualizaci√≥n inicial
            contenido_label.text_size = (Window.width - dp(80), None)
            contenido_label.texture_update()
            contenido_label.height = contenido_label.texture_size[1] + dp(5)
            
            content_layout.add_widget(contenido_label)
            
            # Separador entre secciones (excepto la √∫ltima)
            if titulo_seccion != "ü§ù ACEPTACI√ìN / ACCEPTANCE":
                separator = Label(
                    text="",
                    size_hint_y=None,
                    height=dp(8)
                )
                content_layout.add_widget(separator)
        
        scroll.add_widget(content_layout)
        main_layout.add_widget(scroll)
        
        # Bot√≥n de aceptar
        btn_layout = BoxLayout(
            orientation='vertical',
            size_hint_y=None,
            height=dp(70),
            spacing=dp(5)
        )
        
        btn_aceptar = Button(
            text="‚úì Aceptar / Accept",
            size_hint_y=None,
            height=dp(45),
            font_size=dp(16),
            bold=True,
            background_color=(0, 0, 0, 0),
            color=(1, 1, 1, 1),
            on_press=self.continuar_callback
        )
        
        # Fondo del bot√≥n
        with btn_aceptar.canvas.before:
            Color(0.2, 0.7, 0.3, 1)
            self.btn_bg = RoundedRectangle(
                pos=btn_aceptar.pos,
                size=btn_aceptar.size,
                radius=[dp(22)]
            )
            btn_aceptar.bind(size=self._update_btn_bg, pos=self._update_btn_bg)
        
        btn_layout.add_widget(btn_aceptar)
        
        # Nota
        nota = Label(
            text="üëÜ Toca el bot√≥n verde para continuar",
            font_size=dp(10),
            color=(0.5, 0.5, 0.5, 1),
            size_hint_y=None,
            height=dp(20),
            italic=True
        )
        btn_layout.add_widget(nota)
        
        main_layout.add_widget(btn_layout)
        self.add_widget(main_layout)
    
    def _update_bg(self, instance, value):
        self.bg_rect.pos = instance.pos
        self.bg_rect.size = instance.size
    
    def _update_content_bg(self, instance, value):
        self.content_bg.pos = instance.pos
        self.content_bg.size = instance.size
    
    def _update_btn_bg(self, instance, value):
        self.btn_bg.pos = instance.pos
        self.btn_bg.size = instance.size
    
    def _callback_por_defecto(self, instancia):
        print("‚úÖ Aviso legal aceptado - Continuando...")
        if self.manager and hasattr(self.manager, 'current'):
            if self.manager.has_screen('login'):
                self.manager.current = 'login'
            else:
                print("‚ö†Ô∏è No se encontr√≥ la pantalla 'login'")
    
    def actualizar_textos(self):
        self.clear_widgets()
        self.crear_interfaz()# Actualizado Mon Jun  2 22:58:27 EDT 2025
# Actualizado Mon Jun  2 22:59:06 EDT 2025
# Actualizado Mon Jun  2 23:00:15 EDT 2025
